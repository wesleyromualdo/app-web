name: Plataforma Web - CD

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: false

on:
  push:
    branches:
      - main
      - develop

permissions:
  id-token: write
  contents: read

env:
  ECS_SERVICE: ${{ fromJson('{"main":"production-plataforma-web", "develop":"staging-plataforma-web"}')[github.ref_name] }}
  ECS_CLUSTER: plataforma-cluster
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
  ENV_FILE: ${{ fromJson('{"main":"deploy/production.env", "develop":"deploy/staging.env"}')[github.ref_name] }}
  ASSETS_BUCKET: ${{ fromJson('{"main":"assets.automaxia.com.br", "develop":"assets.automaxia.com.br"}')[github.ref_name] }}
  VERSION: app-${{ github.sha }}


jobs:
  build-app-image:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/node_modules
          key: ${{ runner.os }}-angular-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-angular-${{ hashFiles('**/package-lock.json') }}-
 
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - run: set -u
      - run: npm install
      - run: cp ${{ env.ENV_FILE }} .env
      - run: npm run build --prod
      - run: npm ci --production
      
      - uses: actions/cache/save@v3
        with:
          key: ${{ format('{0}-assets', github.sha) }}
          path: 'dist/'

      - uses: actions/cache/save@v3
        with:
          key: ${{ format('{0}-node-modules', github.sha) }}
          path: 'node_modules/'


#   deploy-assets:
#     runs-on: ubuntu-latest
#     needs:
#      - build-app-image
#     steps:     
#       - name: Checkout
#         uses: actions/checkout@v3

#       - uses: actions/cache/restore@v3
#         with:
#           fail-on-cache-miss: true
#           key: ${{github.sha}}-assets
#           path: "dist/"

#       - uses: actions/cache/restore@v3
#         with:
#           fail-on-cache-miss: true
#           key: ${{github.sha}}-node-modules
#           path: 'node_modules/'

#       - name: Send Static to S3
#         uses: ./.github/actions/upload-s3-assets
#         with:
#           src_dir: ${{ github.workspace }}/dist/static
#           s3_url: s3://${{ env.ASSETS_BUCKET }}/dist/static
#           aws_iam_role: ${{ secrets.AWS_ROLE_ARN }}
#           aws_region: ${{ env.AWS_REGION }}

#       - name: Send Public to S3
#         uses: ./.github/actions/upload-s3-assets
#         with:
#           src_dir: ${{ github.workspace }}/public
#           s3_url: s3://${{ env.ASSETS_BUCKET }}/public
#           aws_iam_role: ${{ secrets.AWS_ROLE_ARN }}
#           aws_region: ${{ env.AWS_REGION }}


  build-docker-image:
    runs-on: ubuntu-latest
    needs:
      - build-app-image
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/cache/restore@v3
        with:
          fail-on-cache-miss: true
          key: ${{github.sha}}-assets
          path: "dist/"

      - uses: actions/cache/restore@v3
        with:
          fail-on-cache-miss: true
          key: ${{github.sha}}-node-modules
          path: 'node_modules/'

      - name: Build and send images to AWS
        id: build-docker-images
        uses: ./.github/actions/build-docker-images
        with:
          aws_iam_role: ${{ secrets.AWS_ROLE_ARN }}
          aws_region: ${{ env.AWS_REGION }}
          ecr_url: ${{ secrets.AWS_ACCOUNT }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECS_SERVICE }}

  deploy-ecs-task:
    runs-on: ubuntu-latest
    needs:
      - build-docker-image
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Update ECS Service
        id: update-ecs-service
        uses: ./.github/actions/update-ecs-service
        with:
          aws_iam_role: ${{ secrets.AWS_ROLE_ARN }}
          aws_region: ${{ env.AWS_REGION }}
          ecr_url: ${{ secrets.AWS_ACCOUNT }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.ECS_SERVICE }}
          ecs_service: ${{ env.ECS_SERVICE }}
          ecs_cluster: ${{ env.ECS_CLUSTER }}
          env_file: ${{ env.ENV_FILE }}
          version: ${{ env.VERSION }}